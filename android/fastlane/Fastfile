default_platform(:android)

platform :android do
  desc "Validate Google Play Store JSON key"
  lane :validate_key do
    validate_play_store_json_key(
      json_key: "fastlane/goggle-service-account.json"  # Path to your JSON key file
    )
  end

  desc "Increment the version code and version name"
  lane :increment_version do
    increment_version_code(
      gradle_file_path: "android/app/build.gradle"   # Path to your build.gradle file
    )
    increment_version_name(
      gradle_file_path: "android/app/build.gradle",
      version_name: get_new_version_name     # Helper method to get the new version name
    )
  end

  desc "Deploy a new version to the Google Play Console"
  lane :deploy_create do
    increment_version  # Increment the version code and name before deployment

    gradle(
      task: "clean assembleRelease",
      project_dir: "android",
      properties: {
        "android.injected.signing.store.file" => "app/release.keystore",
        "android.injected.signing.store.password" => "LCDR_@_Check_List_App_7997",
        "android.injected.signing.key.alias" => "androidReleasekey",
        "android.injected.signing.key.password" => "LCDR_@_Check_List_App_7997"
      }
    )

    supply(
      json_key: "fastlane/google-service-account.json",
      package_name: "com.check_list_app",
      track: "production",
      skip_upload_apk: false,
      skip_upload_aab: false,
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
  end

private_lane :get_new_version_name do
  # Define how to determine the new version name
  # For example, increment the patch version
  version_name = get_version_name(
    gradle_file_path: "app/build.gradle"
  )
  components = version_name.split(".")
  components[-1] = (components[-1].to_i + 1).to_s
  components.join(".")
end

  desc "Bump version code"
  lane :bump_version_code do
    version_code = android_get_version_code(
      app_project_dir: "app"
    )
    new_version_code = version_code + 1
    android_set_version_code(
      app_project_dir: "app",
      version_code: new_version_code
    )
  end

  desc "Bump version name"
  lane :bump_version_name do |options|
    new_version_name = options[:version_name]
    android_set_version_name(
      app_project_dir: "app",
      version_name: new_version_name
    )
  end

  # desc "Notify Slack"
  # lane :notify_slack do |options|
  #   slack(
  #     message: options[:message],
  #     slack_url: "your-slack-webhook-url"
  #   )
  # end

  # before_all do
  #   notify_slack(message: "Starting deployment process")
  # end

  # after_all do
  #   notify_slack(message: "Successfully deployed a new version!")
  # end

  # error do |lane, exception|
  #   notify_slack(message: "Error deploying version: #{exception.message}")
  # end

  desc "Generate changelog"
  lane :generate_changelog do
    sh "git log --pretty=format:'* %s' $(git describe --tags --abbrev=0)..HEAD > fastlane/metadata/android/en-US/changelogs/release.txt"
  end

  desc "Deploy to Firebase App Distribution"
  lane :firebase_distribution do
    gradle(task: "assembleRelease")
    firebase_app_distribution(
      app: "your_firebase_app_id",
      testers: "testers@example.com",
      release_notes_file: "fastlane/metadata/android/en-US/changelogs/release.txt"
    )
  end

  desc "Deploy staging build"
  lane :deploy_staging do
    gradle(task: "assembleStagingRelease")
    supply(
      json_key: "fastlane/goggle-service-account.json",
      package_name: "com.check_list_app",
      track: "beta",
      skip_upload_apk: false,
      skip_upload_aab: false,
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
  end

  desc "Deploy production build"
  lane :deploy_production do
    gradle(task: "assembleProdRelease")
    supply(
      json_key: "fastlane/goggle-service-account.json",
      package_name: "com.check_list_app",
      track: "production",
      skip_upload_apk: false,
      skip_upload_aab: false,
      skip_upload_metadata: false,
      skip_upload_images: false,
      skip_upload_screenshots: false
    )
  end
end


# ******* Script to run *******
# fastlane android validate_key

# fastlane android deploy_create

# fastlane android bump_version_code

# fastlane android bump_version_name version_name:"1.0.1"

# fastlane android firebase_distribution

# fastlane android deploy_staging

# fastlane android deploy_production

# ******* Script to run *******
