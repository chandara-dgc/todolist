def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {

    flavorDimensions += "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationId "com.check_list_app.dev"
            resValue "string", "app_name", "MyApp Dev"
        }
        prod {
            dimension "flavor-type"
            applicationId "com.check_list_app"
            resValue "string", "app_name", "Check List"
        }
        staging {
            dimension "flavor-type"
            applicationId "com.check_list_app.staging"
            resValue "string", "app_name", "MyApp Staging"
        }
    }

    applicationVariants.configureEach { variant ->
        def versionName = variant.versionName
        def versionCode = variant.versionCode
        variant.outputs.configureEach {
            outputFileName = "${variant.name}-${versionName}-${versionCode}.apk"
        }
    }

   namespace "com.check_list_app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.check_list_app"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        debug {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_DEBUG')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_DEBUG)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD_DEBUG
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_DEBUG
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD_DEBUG
            }
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE_RELEASE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE_RELEASE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD_RELEASE
                keyAlias MYAPP_UPLOAD_KEY_ALIAS_RELEASE
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD_RELEASE
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'mapDevDebugSourceSetPaths') {
        task.dependsOn 'processDevDebugGoogleServices'
    }
}